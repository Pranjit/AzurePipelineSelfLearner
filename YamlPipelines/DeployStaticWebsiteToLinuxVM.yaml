# ============================================
# Azure Pipelines: Top-Level Keywords Overview
# ============================================
# | Keyword         | Description                                             |
# |------------------|---------------------------------------------------------|
# | name             | Sets the name of the pipeline run.                     |
# | trigger          | Defines which branches trigger the pipeline.           |
# | pr               | Defines pull request trigger branches.                 |
# | schedules        | Defines scheduled pipeline runs (cron format).         |
# | variables        | Defines global variables.                              |
# | resources        | External entities like repos, pipelines, containers.   |
# | services         | Container services (e.g., Redis, MySQL) for jobs.      |
# | stages           | Defines pipeline stages (each can have multiple jobs). |
# | jobs             | Defines jobs when not using stages.                    |
# | pool             | Agent pool for running the pipeline.                   |
# | container        | Main container to run jobs in.                         |
# | containers       | Define multiple containers for jobs.                   |
# | workspace        | Customize source checkout and artifacts paths.         |
# | lockBehavior     | Controls locking for environments during deployments.  |
# | extends          | Reuse templates across pipelines.                      |
# ============================================

trigger:
- none

pr: none

pool:  
  name: Azure Pipelines
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: AzurePipelineSelfLearner
      type: github
      name: pranjit/AzurePipelineSelfLearner
      endpoint: AzurePipelineUnivercity 
      ref: refs/heads/main

parameters:
  - name: environment
    default: "Playground" 
    type: string   
    values:
      - Playground
      - Prod
    displayName: "Select Environment"

variables:
  - group: TerraformSecrets
  - name: build_id
    value: $(Build.BuildId)
  - name: commitId
    value: $[ substring(variables['Build.SourceVersion'], 0, 7) ]  # short hash git commit id
  - name: TF_WORKING_DIR
    value: "terraform/azure-linux-vmss-static-site"  

name: ${{ parameters.environment }}-$(Build.BuildId)-DeployStaticWebsiteToLinuxVM

stages:
  - stage: 'Terraform'
    displayName: 'Terraform Deployment'
    jobs:
      - job: TerraformJob
        displayName: "Run Terraform to Create Resources for VMSS"
        steps:
        # Step 1: Install Terraform CLI
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: '1.5.7'

          # Step 2: Initialize Terraform
          - script: |
              cd $(TF_WORKING_DIR)
              terraform init
            displayName: 'Terraform Init'

          # Step 3: Terraform Validate
          - script: |
              cd $(TF_WORKING_DIR)
              terraform validate
            displayName: 'Terraform Validate'

          # Step 4: Terraform Plan
          - script: |
              terraform -chdir=$(TF_WORKING_DIR) plan -out=tfplan -var "subscription_id=$(AZURE_SUBSCRIPTION_ID)" -var "client_id=$(AZURE_CLIENT_ID)" -var "client_secret=$(AZURE_CLIENT_SECRET)" -var "tenant_id=$(AZURE_TENANT_ID)" -var "build_id=$(build_id)"
            displayName: 'Terraform Plan'

          # Step 5: Terraform Apply
          - script: |
              cd $(TF_WORKING_DIR)
              terraform apply -auto-approve tfplan
            displayName: 'Terraform Apply'
          
      



